

The goal is to make a game where the players shoots darts towards balloons which are passing through  in front of the player. 


1- Implementing the balloon physics: 

-> For the Balloons the goal is to have them appear randomly in front of the player, and then disappear in case they are not popped.



	-> The balloons are generated with a random velocity vector in the (Y,Z) plane. Bounded by X values 	(1.82, -1.82)

	-> For now the balloons are generated in the plane Z = 6 And bound in the rectangle : 
		(1.6, 5.8)
		(1.6, 2.3)
		(4.3, 2.3)
		(4.3, 5.8)


	-> In this case The balloons must have a negative Z speed and null X speed and variable y speed direction = (0,Y)

-> The bouncy ballons idea => make use of them to make obstacles to increase or decreae the game difficulty 

-> The player shoots darts at the balloons
	-> To implement the dart shooting mechanism I created a game object (cylinder)  & empty game object dart shooter to which 
	I attached the DartShooter.cs script which implements that mechanic 
	-> The implemented mechanic works, however it shoots the darts at in the Z direction of the empty game object DartShooter
	Since I want the game to be a first person shooter, I attached the DartShooter script to the camera object instead and also I modified 
	the script so that the darts are shot in the direction of the camera 
	-> The mechanic is well implemented, however the darts are being shot in the camera's view direction
	-> Now I'd like for the darts to be shot in the direction of the mouse cursor
	In order to do so, We'll use rayscasting 
		-> Create a ray from the camera through the mouse position 
		-> Determine the target point (set the distance to 1000) 
			-> I think since we're not using the ray to interact with the blloons and rather using the darts's collision
			we can set the distance to a fixed distance 
		-> Determine the direction by subtracting vectors and normalizing 
		-> Instantiate the dart
		-> set rigid body velocity 
	-> Now I'd like for the dart's distance to increase the longer I hold the mouse left button
	In order to do so I'll try to condition the dartspeed to the time I spend holding the mouse button
	with a pre-fixed maximum and minimum speed 
		-> minDartSpeed 10 maxDartSpeed 20
		-> When mouse pressed => increment holdtime
		-> When mouse up shootdart
			-> dartspeed is computed by clamping minDartSpeed + holdtime*(maxDartSpeed - minDartSpeed) 
			between mindartspeed maxdartspeed 

-> I'd like to implement a score system, since the goal of the game is to shoot balloons to improove the player's score 
	-> I wanted the score to be displayed on the screen and whenever a dart touches a balloon, the score is incremented by 1 
	-> In order to do so I created a UIManager script (linked to an empty GameObject):
		-> The UIManager Class contains a function which takes as an argument a score function and increments the score by that value every single time 
		-> I'm using a score argument since I'd like to implement different types of balloons in the game 
		-> To display the score I created a Canvas and a added a Text Mesh Pro. This Text Mesh Object is the going to be assigned to the Score Text variable 
		in the UIManager Script which is a component of the UIManager Object
		-> I asked around and found out that I could update the score variable directly from the Balloon[Movement].cs script:
			-> Whenever a collision is detected I could call the the UpdateScore() method from the UIManager class and increment the score
		-> When I start the game the Text Mesh would keep the default value new text so I decided to call UpdateScore(0) in the Start() function in order to start the game with a score of 0
	-> Now I want to implement a whole ScoreBoard system, where each time the user can save their score and compare it to other performances
	#FIXME 
	-> Let's implement the different type of balloons ie Balloons which each give a certain number of points back to the user 1 3 or 5 
		-> The First Idea I had is to create different classes of balloons (Ballon1point...) but when I searched online, I (re)discovered that c# is an object oriented language 
		So I could use inheritence:
			-> Create a generic class Balloon with a property called score 
			-> Create each balloon class, each class inherits from the Balloon class and each has its own score value 
		-> Now I'd like for the OnePointBalloons to spawn more frequently than the ThreePointBalloons and FivePointBalloons with ThreePointBalloons spawning more often than FivePointBalloons 
		I'd like for this spawn probability to be inversly proportional to the balloon's score
			-> This is more of a probability problem : 
				-> Originally balloons are chosen to spanw via a random selection in the list of prefabs (component of the Balloon Spawner Object)
				-> Based on this mechanism I can make a list where I for example insert 15 OnePointBalloons 5 ThreePointBalloons and 3 FivePointBalloons
					-> Make an empty list:
						-> foreach object in prefablist get score
						-> Compute weight = 15/score 
						-> iterate between 1 and weight
							foreach iteration : add corresponding balloon prefab to the empty list 
					-> WHen spawning call do the random selection from this list 

	-> Let's implement a menu system  

-> The Q button kills the game whenever it's pressed 
 -> To implement this mechanism it was pretty simple
	-> Create a script which kills the game when q is pressed 
	-> Attach it to the empty objects menumanager and gamemanager